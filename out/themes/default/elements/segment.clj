(clojure.core/ns
 themes.default.elements.segment
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def background "(:variableName @ white)")
(def borderWidth "(:measurement 1 px)")
(def border "(:variableName @ borderColor)")
(def boxShadow "(:variableName @ subtleShadow)")
(def verticalPadding "(:measurement 1 em)")
(def horizontalPadding "(:measurement 1 em)")
(def padding "(:variableName @ horizontalPadding)")
(def verticalMargin "(:identifier rem)")
(def horizontalMargin "(:measurement 0 em)")
(def margin "(:variableName @ horizontalMargin)")
(def borderRadius "(:variableName @ defaultBorderRadius)")
(def groupedMargin "(:variableName @ margin)")
(def groupedBorder "(:variableName @ border)")
(def groupedBoxShadow "(:variableName @ boxShadow)")
(def groupedBorderRadius "(:variableName @ borderRadius)")
(def nestedGroupMargin "(:variableName @ verticalMargin)")
(def groupedSegmentBorder "(:identifier none)")
(def groupedSegmentDivider "(:variableName @ border)")
(def groupedSegmentMargin "(:measurement 0 em)")
(def groupedSegmentWidth "(:identifier auto)")
(def groupedSegmentBoxShadow "(:identifier none)")
(def pageGridMargin "")
(def loaderDimmerColor ")")
(def loaderDimmerZIndex "(:measurement 100)")
(def loaderSize "(:measurement 3 em)")
(def loaderLineZIndex "(:measurement 101)")
(def piledZIndex "(:identifier auto)")
(def piledMargin "(:measurement 3 em)")
(def piledBoxShadow "")
(def piledDegrees "(:measurement 1.2 deg)")
(def piledBorder "(:variableName @ border)")
(def circularPadding "(:measurement 2 em)")
(def stackedHeight "(:measurement 6 px)")
(def stackedPageBackground "(:variableName @ subtleTransparentBlack)")
(def stackedPadding "")
(def tallStackedPadding "")
(def raisedBoxShadow "(:variableName @ floatingShadow)")
(def paddedSegmentPadding "(:measurement 1.5 em)")
(def veryPaddedSegmentPadding "(:measurement 3 em)")
(def attachedTopOffset "(:measurement 0 px)")
(def attachedBottomOffset "(:measurement 0 px)")
(def attachedHorizontalOffset "(:variableName @ borderWidth)")
(def attachedWidth "")
(def attachedBoxShadow "(:identifier none)")
(def attachedBorder "(:variableName @ solidBorderColor)")
(def attachedBottomBoxShadow "(:variableName @ attachedBoxShadow)")
(def invertedBackground "(:variableName @ black)")
(def floatedDistance "(:measurement 1 em)")
(def basicBackground "(:identifier transparent)")
(def basicBorder "(:identifier none)")
(def basicBoxShadow "(:identifier none)")
(def basicBorderRadius "(:measurement 0 px)")
(def coloredBorderSize "(:measurement 2 px)")
(def secondaryBackground "(:variableName @ darkWhite)")
(def secondaryColor "(:variableName @ mutedTextColor)")
(def tertiaryBackground "(:variableName @ midWhite)")
(def tertiaryColor "(:variableName @ mutedTextColor)")
(def secondaryInvertedLightness "(:measurement 0.2)")
(def secondaryInvertedColor "(:variableName @ invertedMutedTextColor)")
(def tertiaryInvertedLightness "(:measurement 0.35)")
(def tertiaryInvertedColor "(:variableName @ invertedMutedTextColor)")
(defstyles root)

(clojure.core/ns
 styles.themes.default.elements.segment
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def background (clojure.core/str white))
(def borderWidth (clojure.core/str "1px"))
(def border (clojure.core/str borderWidth " " "solid" " " borderColor))
(def boxShadow (clojure.core/str subtleShadow))
(def verticalPadding (clojure.core/str "1em"))
(def horizontalPadding (clojure.core/str "1em"))
(def padding (clojure.core/str verticalPadding " " horizontalPadding))
(def verticalMargin (clojure.core/str "11" " " "rem"))
(def horizontalMargin (clojure.core/str "0em"))
(def margin (clojure.core/str verticalMargin " " horizontalMargin))
(def borderRadius (clojure.core/str defaultBorderRadius))
(def groupedMargin (clojure.core/str margin))
(def groupedBorder (clojure.core/str border))
(def groupedBoxShadow (clojure.core/str boxShadow))
(def groupedBorderRadius (clojure.core/str borderRadius))
(def
 nestedGroupMargin
 (clojure.core/str verticalMargin " " verticalMargin))
(def groupedSegmentBorder (clojure.core/str "none"))
(def groupedSegmentDivider (clojure.core/str border))
(def groupedSegmentMargin (clojure.core/str "0em"))
(def groupedSegmentWidth (clojure.core/str "auto"))
(def groupedSegmentBoxShadow (clojure.core/str "none"))
(def pageGridMargin nil)
(def loaderDimmerColor (clojure.core/str "rgba"))
(def loaderDimmerZIndex (clojure.core/str "100100"))
(def loaderSize (clojure.core/str "3em"))
(def loaderLineZIndex (clojure.core/str "101101"))
(def piledZIndex (clojure.core/str "auto"))
(def piledMargin (clojure.core/str "3em"))
(def piledBoxShadow (clojure.core/str ""))
(def piledDegrees (clojure.core/str "1.2deg"))
(def piledBorder (clojure.core/str border))
(def circularPadding (clojure.core/str "2em"))
(def stackedHeight (clojure.core/str "6px"))
(def stackedPageBackground (clojure.core/str subtleTransparentBlack))
(def stackedPadding nil)
(def tallStackedPadding nil)
(def raisedBoxShadow (clojure.core/str floatingShadow))
(def paddedSegmentPadding (clojure.core/str "1.5em"))
(def veryPaddedSegmentPadding (clojure.core/str "3em"))
(def attachedTopOffset (clojure.core/str "0px"))
(def attachedBottomOffset (clojure.core/str "0px"))
(def attachedHorizontalOffset nil)
(def attachedWidth nil)
(def attachedBoxShadow (clojure.core/str "none"))
(def
 attachedBorder
 (clojure.core/str borderWidth " " "solid" " " solidBorderColor))
(def attachedBottomBoxShadow (clojure.core/str attachedBoxShadow))
(def invertedBackground (clojure.core/str black))
(def floatedDistance (clojure.core/str "1em"))
(def basicBackground (clojure.core/str "none" " " "transparent"))
(def basicBorder (clojure.core/str "none"))
(def basicBoxShadow (clojure.core/str "none"))
(def basicBorderRadius (clojure.core/str "0px"))
(def coloredBorderSize (clojure.core/str "2px"))
(def secondaryBackground (clojure.core/str darkWhite))
(def secondaryColor (clojure.core/str mutedTextColor))
(def tertiaryBackground (clojure.core/str midWhite))
(def tertiaryColor (clojure.core/str mutedTextColor))
(def secondaryInvertedLightness (clojure.core/str "0.20.2"))
(def secondaryInvertedColor (clojure.core/str invertedMutedTextColor))
(def tertiaryInvertedLightness (clojure.core/str "0.350.35"))
(def tertiaryInvertedColor (clojure.core/str invertedMutedTextColor))
(defstyles root)

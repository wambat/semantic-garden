(clojure.core/ns
 themes.default.elements.input
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def inputFont "(:variableName @ pageFont)")
(def verticalPadding "(:variableName @ inputVerticalPadding)")
(def horizontalPadding "(:variableName @ inputHorizontalPadding)")
(def lineHeight "(:variableName @ inputLineHeight)")
(def lineHeightOffset "")
(def textAlign "(:identifier left)")
(def background "(:variableName @ inputBackground)")
(def borderWidth "(:measurement 1 px)")
(def border "(:variableName @ borderColor)")
(def boxShadow "(:identifier none)")
(def borderRadius "(:variableName @ defaultBorderRadius)")
(def transition "(:variableName @ defaultEasing)")
(def iconOpacity "(:measurement 0.5)")
(def iconFocusOpacity "(:measurement 1)")
(def iconOffset "(:measurement -0.5 em)")
(def iconDistance "(:measurement 0 em)")
(def iconMargin "")
(def iconTransition "(:variableName @ defaultEasing)")
(def transparentIconWidth "(:variableName @ glyphWidth)")
(def transparentIconMargin "(:measurement 2 em)")
(def circularIconVerticalOffset "(:measurement 0.35 em)")
(def circularIconHorizontalOffset "(:measurement 0.5 em)")
(def labelCornerTop "(:variableName @ borderWidth)")
(def labelCornerRight "(:variableName @ borderWidth)")
(def labelCornerSize "(:variableName @ relative9px)")
(def labelSize "(:measurement 1 em)")
(def labelVerticalPadding "")
(def labeledMargin "(:measurement 2.5 em)")
(def labeledIconInputMargin "(:measurement 3.25 em)")
(def labeledIconMargin "(:measurement 1.25 em)")
(def placeholderColor "(:variableName @ inputPlaceholderColor)")
(def
 placeholderFocusColor
 "(:variableName @ inputPlaceholderFocusColor)")
(def downBorderColor ")")
(def downBackground "#FAFAFA")
(def downColor "(:variableName @ textColor)")
(def downBoxShadow "(:identifier none)")
(def focusBorderColor "(:variableName @ focusedFormBorderColor)")
(def focusBackground "(:variableName @ background)")
(def focusColor "(:variableName @ hoveredTextColor)")
(def focusBoxShadow "(:identifier none)")
(def errorBackground "(:variableName @ negativeBackgroundColor)")
(def errorColor "(:variableName @ negativeTextColor)")
(def errorBorder "(:variableName @ negativeBorderColor)")
(def errorBoxShadow "(:identifier none)")
(def placeholderErrorColor ")")
(def placeholderErrorFocusColor ")")
(def invertedLoaderFillColor ")")
(def
 transparentInvertedPlaceholderColor
 "(:variableName @ invertedUnselectedTextColor)")
(def transparentInvertedColor "(:variableName @ white)")
(defstyles root)

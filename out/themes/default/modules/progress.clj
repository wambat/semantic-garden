(clojure.core/ns
 themes.default.modules.progress
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def verticalSpacing (clojure.core/str "1em"))
(def background (clojure.core/str strongTransparentBlack))
(def border (clojure.core/str "none"))
(def boxShadow (clojure.core/str "none"))
(def padding (clojure.core/str "0em"))
(def borderRadius (clojure.core/str defaultBorderRadius))
(def barPosition (clojure.core/str "relative"))
(def barHeight (clojure.core/str "1.75em"))
(def barBackground nil)
(def barBorderRadius (clojure.core/str borderRadius))
(def barTransitionEasing (clojure.core/str defaultEasing))
(def barTransitionDuration (clojure.core/str defaultDuration))
(def
 barTransition
 (clojure.core/str
  "background-color"
  " "
  barTransitionDuration
  " "
  barTransitionEasing))
(def barInitialWidth (clojure.core/str "0%"))
(def barMinWidth (clojure.core/str "2em"))
(def progressWidth (clojure.core/str "auto"))
(def progressSize (clojure.core/str relativeSmall))
(def progressPosition (clojure.core/str "absolute"))
(def progressTop (clojure.core/str "50%"))
(def progressRight (clojure.core/str "0.5em"))
(def progressLeft (clojure.core/str "auto"))
(def progressBottom (clojure.core/str "auto"))
(def progressOffset (clojure.core/str "-0.5em"))
(def progressColor (clojure.core/str invertedLightTextColor))
(def progressTextShadow (clojure.core/str "none"))
(def progressFontWeight (clojure.core/str bold))
(def progressTextAlign (clojure.core/str "left"))
(def labelWidth (clojure.core/str "100%"))
(def labelHeight (clojure.core/str "1.5em"))
(def labelSize (clojure.core/str "1em"))
(def labelPosition (clojure.core/str "absolute"))
(def labelTop (clojure.core/str "100%"))
(def labelLeft (clojure.core/str "0%"))
(def labelRight (clojure.core/str "auto"))
(def labelBottom (clojure.core/str "auto"))
(def labelOffset nil)
(def labelColor (clojure.core/str textColor))
(def labelTextShadow (clojure.core/str "none"))
(def labelFontWeight (clojure.core/str bold))
(def labelTextAlign (clojure.core/str "center"))
(def
 labelTransition
 (clojure.core/str "color" " " "0.4s" " " defaultEasing))
(def indicatingFirstColor nil)
(def indicatingSecondColor nil)
(def indicatingThirdColor nil)
(def indicatingFourthColor nil)
(def indicatingFifthColor nil)
(def indicatingSixthColor nil)
(def indicatingFirstLabelColor (clojure.core/str textColor))
(def indicatingSecondLabelColor (clojure.core/str textColor))
(def indicatingThirdLabelColor (clojure.core/str textColor))
(def indicatingFourthLabelColor (clojure.core/str textColor))
(def indicatingFifthLabelColor (clojure.core/str textColor))
(def indicatingSixthLabelColor (clojure.core/str textColor))
(def activePulseColor (clojure.core/str white))
(def activePulseMaxOpacity (clojure.core/str "0.30.3"))
(def activePulseDuration (clojure.core/str "2s"))
(def activeMinWidth (clojure.core/str barMinWidth))
(def attachedBackground (clojure.core/str "transparent"))
(def attachedHeight (clojure.core/str "0.20.2" " " "rem"))
(def attachedBorderRadius (clojure.core/str borderRadius))
(def invertedBackground (clojure.core/str transparentWhite))
(def invertedBorder (clojure.core/str "none"))
(def invertedBarBackground (clojure.core/str barBackground))
(def invertedProgressColor (clojure.core/str offWhite))
(def invertedLabelColor (clojure.core/str white))
(def tinyBarHeight (clojure.core/str "0.5em"))
(def smallBarHeight (clojure.core/str "1em"))
(def largeBarHeight (clojure.core/str "2.5em"))
(def bigBarHeight (clojure.core/str "3.5em"))
(defstyles root)

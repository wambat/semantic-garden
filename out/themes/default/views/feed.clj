(clojure.core/ns
 themes.default.views.feed
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def margin (clojure.core/str "1em" " " "0em"))
(def eventWidth (clojure.core/str "100%"))
(def eventPadding nil)
(def eventMargin (clojure.core/str "0em"))
(def eventBackground (clojure.core/str "none"))
(def eventDivider (clojure.core/str "none"))
(def labelWidth (clojure.core/str "2.5em"))
(def labelHeight (clojure.core/str "auto"))
(def labelAlignSelf (clojure.core/str "stretch"))
(def labelTextAlign (clojure.core/str "left"))
(def iconLabelOpacity (clojure.core/str "11"))
(def iconLabelWidth (clojure.core/str "100%"))
(def iconLabelSize (clojure.core/str "1.5em"))
(def iconLabelPadding (clojure.core/str "0.25em"))
(def iconLabelBackground (clojure.core/str "none"))
(def iconLabelBorderRadius (clojure.core/str "none"))
(def iconLabelBorder (clojure.core/str "none"))
(def iconLabelColor (clojure.core/str "rgba"))
(def imageLabelWidth (clojure.core/str "100%"))
(def imageLabelHeight (clojure.core/str "auto"))
(def imageLabelBorderRadius (clojure.core/str circularRadius))
(def
 labeledContentMargin
 (clojure.core/str "0.5em" " " "0em" " " relative5px " " relativeLarge))
(def lastLabeledContentPadding (clojure.core/str "0em"))
(def contentAlignSelf (clojure.core/str "stretch"))
(def contentTextAlign (clojure.core/str "left"))
(def contentWordWrap (clojure.core/str "break-word"))
(def
 dateMargin
 (clojure.core/str "-0.5-0.5" " " "rem" " " "0em" " " "0em"))
(def datePadding (clojure.core/str "0em"))
(def dateColor (clojure.core/str lightTextColor))
(def dateFontSize (clojure.core/str relativeMedium))
(def dateFontWeight (clojure.core/str normal))
(def dateFontStyle (clojure.core/str normal))
(def summaryMargin (clojure.core/str "0em"))
(def summaryFontSize (clojure.core/str relativeMedium))
(def summaryFontWeight (clojure.core/str bold))
(def summaryColor (clojure.core/str textColor))
(def summaryImageWidth (clojure.core/str "auto"))
(def summaryImageHeight (clojure.core/str "10em"))
(def
 summaryImageMargin
 (clojure.core/str "-0.25em" " " "0.25em" " " "0em" " " "0em"))
(def summaryImageVerticalAlign (clojure.core/str "middle"))
(def summaryImageBorderRadius (clojure.core/str "0.25em"))
(def summaryDateDisplay (clojure.core/str "inline-block"))
(def summaryDateFloat (clojure.core/str "none"))
(def
 summaryDateMargin
 (clojure.core/str "0em" " " "0em" " " "0em" " " "0.5em"))
(def summaryDatePadding (clojure.core/str "0em"))
(def summaryDateFontSize (clojure.core/str relativeTiny))
(def summaryDateFontWeight (clojure.core/str dateFontWeight))
(def summaryDateFontStyle (clojure.core/str dateFontStyle))
(def summaryDateColor (clojure.core/str dateColor))
(def userFontWeight (clojure.core/str bold))
(def userDistance (clojure.core/str "0em"))
(def userImageWidth (clojure.core/str summaryImageWidth))
(def userImageHeight (clojure.core/str summaryImageHeight))
(def userImageMargin (clojure.core/str summaryImageMargin))
(def
 userImageVerticalAlign
 (clojure.core/str summaryImageVerticalAlign))
(def extraMargin (clojure.core/str "0.5em" " " "0em" " " "0em"))
(def extraBackground (clojure.core/str "none"))
(def extraPadding (clojure.core/str "0em"))
(def extraColor (clojure.core/str textColor))
(def
 extraImageMargin
 (clojure.core/str "0em" " " "0.25em" " " "0em" " " "0em"))
(def extraImageWidth (clojure.core/str "6em"))
(def extraTextPadding (clojure.core/str "0em"))
(def extraTextPointer (clojure.core/str "none"))
(def extraTextFontSize (clojure.core/str relativeMedium))
(def extraTextLineHeight (clojure.core/str lineHeight))
(def extraTextMaxWidth (clojure.core/str "500px"))
(def metadataDisplay (clojure.core/str "inline-block"))
(def metadataFontSize (clojure.core/str relativeTiny))
(def metadataMargin (clojure.core/str "0.5em" " " "0em" " " "0em"))
(def metadataBackground (clojure.core/str "none"))
(def metadataBorder (clojure.core/str "none"))
(def metadataBorderRadius (clojure.core/str "00"))
(def metadataBoxShadow (clojure.core/str "none"))
(def metadataPadding (clojure.core/str "0em"))
(def metadataColor (clojure.core/str "rgba"))
(def metadataElementSpacing (clojure.core/str "0.75em"))
(def likeColor (clojure.core/str ""))
(def likeHoverColor (clojure.core/str "#FF2733"))
(def likeActiveColor (clojure.core/str "#EF404A"))
(def likeTransition (clojure.core/str "0.2s" " " "color" " " "ease"))
(def metadataDivider (clojure.core/str ""))
(def metadataDividerColor (clojure.core/str "rgba"))
(def metadataDividerOffset (clojure.core/str "-1em"))
(def metadataActionCursor (clojure.core/str "pointer"))
(def metadataActionOpacity (clojure.core/str "11"))
(def metadataActionColor (clojure.core/str "rgba"))
(def
 metadataActionTransition
 (clojure.core/str "color" " " defaultDuration " " defaultEasing))
(def metadataActionHoverColor (clojure.core/str selectedTextColor))
(defstyles root)

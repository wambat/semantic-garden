(clojure.core/ns
 themes.classic.views.card
 (:require
  [garden.def :refer [defstyles]]
  [garden.stylesheet :refer [at-media]]
  [garden.selectors :as sel]
  [garden.units :refer [px]]))
(def background "#FFFFFF")
(def borderRadius "(:identifier rem)")
(def display "(:identifier block)")
(def float "(:identifier left)")
(def margin "(:variableName @ rowSpacing)")
(def minHeight "(:measurement 0 px)")
(def padding "(:measurement 0 em)")
(def width "(:measurement 300 px)")
(def boxShadow "(:variableName @ borderColor)")
(def border "(:identifier none)")
(def zIndex "")
(def horizontalSpacing "(:measurement 0.5 em)")
(def rowSpacing "(:measurement 2.5 em)")
(def groupMargin "")
(def imageBackground "(:variableName @ transparentBlack)")
(def imagePadding "(:measurement 0 em)")
(def imageBorderRadius "(:measurement 0 em)")
(def imageBoxShadow "(:identifier none)")
(def imageBorder "(:identifier none)")
(def contentMargin "(:measurement 0 em)")
(def contentPadding "(:measurement 1 em)")
(def contentFontSize "(:measurement 1 em)")
(def contentBorder "(:identifier none)")
(def contentBorderRadius "(:measurement 0 em)")
(def contentBoxShadow "(:identifier none)")
(def titleMargin "(:measurement 0 em)")
(def titleFont "(:variableName @ headerFont)")
(def titleFontWeight "(:identifier bold)")
(def titleFontSize "(:measurement 1.25 em)")
(def titleColor "(:variableName @ darkTextColor)")
(def metaColor "(:variableName @ lightTextColor)")
(def descriptionDistance "(:measurement 0.75 em)")
(def descriptionColor "(:variableName @ lightTextColor)")
(def imageSpacing "(:measurement 0.25 em)")
(def contentImageWidth "(:measurement 2 em)")
(def contentImageVerticalAlign "(:identifier middle)")
(def paragraphDistance "(:measurement 0.1 em)")
(def extraDisplay "(:identifier absolute)")
(def extraTop "(:measurement 100 %)")
(def extraLeft "(:measurement 0 em)")
(def extraWidth "(:measurement 100 %)")
(def extraPadding "(:measurement 0.75 em)")
(def extraColor "(:variableName @ lightTextColor)")
(def extraTransition "(:variableName @ defaultEasing)")
(def hoverCursor "(:identifier pointer)")
(def hoverZIndex "(:measurement 5)")
(def hoverBorder "(:identifier none)")
(def hoverBoxShadow "(:variableName @ selectedBorderColor)")
(def medium "(:measurement 1 em)")
(defstyles root)
